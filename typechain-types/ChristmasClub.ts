/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ChristmasClubInterface extends utils.Interface {
  functions: {
    "deposit(uint256)": FunctionFragment;
    "increaseSavers(uint256)": FunctionFragment;
    "numberOfSavers()": FunctionFragment;
    "owner()": FunctionFragment;
    "totalAmountSaved()": FunctionFragment;
    "totalGoalAmount()": FunctionFragment;
    "unlockEndTime()": FunctionFragment;
    "unlockStartTime()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "increaseSavers"
      | "numberOfSavers"
      | "owner"
      | "totalAmountSaved"
      | "totalGoalAmount"
      | "unlockEndTime"
      | "unlockStartTime"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSavers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfSavers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAmountSaved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalGoalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseSavers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfSavers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountSaved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalGoalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(uint256,uint256)": EventFragment;
    "Withdrawal(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface DepositEventObject {
  amount: BigNumber;
  when: BigNumber;
}
export type DepositEvent = TypedEvent<
  [BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface WithdrawalEventObject {
  amount: BigNumber;
  when: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [BigNumber, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface ChristmasClub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChristmasClubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseSavers(
      _num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numberOfSavers(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    totalAmountSaved(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalGoalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseSavers(
    _num: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numberOfSavers(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  totalAmountSaved(overrides?: CallOverrides): Promise<BigNumber>;

  totalGoalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  unlockEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  unlockStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseSavers(
      _num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfSavers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    totalAmountSaved(overrides?: CallOverrides): Promise<BigNumber>;

    totalGoalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unlockEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    unlockStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposit(uint256,uint256)"(amount?: null, when?: null): DepositEventFilter;
    Deposit(amount?: null, when?: null): DepositEventFilter;

    "Withdrawal(uint256,uint256)"(
      amount?: null,
      when?: null
    ): WithdrawalEventFilter;
    Withdrawal(amount?: null, when?: null): WithdrawalEventFilter;
  };

  estimateGas: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseSavers(
      _num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numberOfSavers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountSaved(overrides?: CallOverrides): Promise<BigNumber>;

    totalGoalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unlockEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    unlockStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseSavers(
      _num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numberOfSavers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmountSaved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalGoalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
